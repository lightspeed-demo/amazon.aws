---
# TODO - name: test 'validate_certs' parameter
# =============================================================

- module_defaults:
    group/aws:
      region: "{{ aws_region }}"
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
  block:
    - name: Create temporary directory
      register: _tmpdir
      ansible.builtin.tempfile:
        suffix: .private_key
        state: directory

    - name: Define file name where to save private key
      ansible.builtin.set_fact:
        priv_key_file_name: "{{ _tmpdir.path }}/aws_ssh_rsa"

    - name: test with no parameters
      register: result
      ignore_errors: true
      amazon.aws.ec2_key:

    - name: assert failure when called with no parameters
      ansible.builtin.assert:
        that:
          - result.failed
          - 'result.msg == "missing required arguments: name"'

    - name: test removing a non-existent key pair (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: absent

    - name: assert removing a non-existent key pair
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: test removing a non-existent key pair
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: absent

    - name: assert removing a non-existent key pair
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: test creating a new key pair (check_mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue

    - name: assert creating a new key pair
      ansible.builtin.assert:
        that:
          - result is changed

    - name: assert that key pair was not created
      ec2_key_info:
        names:
          - "{{ ec2_key_name }}"
      register: aws_keypair
      failed_when: aws_keypair.keypairs | length > 0

    - name: test creating a new key pair
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue

    - name: assert creating a new key pair
      ansible.builtin.assert:
        that:
          - result is changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == ec2_key_name
          - result.key.id.startswith('key-')
          - '"snake_case" in result.key.tags'
          - result.key.tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in result.key.tags'
          - result.key.tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in result.key.tags'
          - result.key.tags['spaced key'] == 'Spaced value'

    - name: assert that key pair was created
      ec2_key_info:
        names:
          - "{{ ec2_key_name }}"
      register: aws_keypair
      failed_when: aws_keypair.keypairs | length == 0

    - name: Gather info about the key pair
      ec2_key_info:
        names: "{{ ec2_key_name }}"
      register: key_info

    - name: assert the gathered key info
      ansible.builtin.assert:
        that:
          - key_info.keypairs[0].key_name == ec2_key_name
          - key_info.keypairs[0].key_pair_id.startswith('key-')
          - '"snake_case" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['spaced key'] == 'Spaced value'

        key_id_1: "{{ result.key.id }}"

    - name: test re-"creating" the same key (check_mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue

    - name: assert re-creating the same key
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test re-"creating" the same key
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue

    - name: assert re-creating the same key
      assert:
        that:
          - result is not changed

    # ============================================================
    # Test: create new key by AWS (key_material not provided)
    # and save private_key into file name
    # ============================================================
    - name: Delete existing file name
      ansible.builtin.file:
        state: absent
        path: "{{ priv_key_file_name }}"

    - name: test creating a new key pair (check_mode)
      ec2_key:
        name: "{{ ec2_key_name_rsa }}"
        state: present
        file_name: "{{ priv_key_file_name }}"
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue
          spaced key: Spaced value
      register: result
      check_mode: true
      no_log: true

    - name: assert creating a new key pair
      assert:
        that:
          - result is changed

    - name: assert that key pair was not created
      ec2_key_info:
        names:
          - "{{ ec2_key_name_rsa }}"
      register: aws_keypair
      failed_when: aws_keypair.keypairs | length > 0

    - name: assert that private key was not saved
      ansible.builtin.stat:
        path: "{{ priv_key_file_name }}"
      register: result
      failed_when: result.stat.exists

    - name: test creating a new key pair
      ec2_key:
        name: "{{ ec2_key_name_rsa }}"
        state: present
        file_name: "{{ priv_key_file_name }}"
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue
          spaced key: Spaced value
      register: result

    - name: assert creating a new key pair
      assert:
        that:
          - result is changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == ec2_key_name_rsa
          - result.key.id.startswith('key-')
          - '"snake_case" in result.key.tags'
          - result.key.tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in result.key.tags'
          - result.key.tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in result.key.tags'
          - result.key.tags['spaced key'] == 'Spaced value'

    - name: assert that key pair was created
      ec2_key_info:
        names:
          - "{{ ec2_key_name_rsa }}"
      register: aws_keypair
      failed_when: aws_keypair.keypairs | length == 0

    - name: assert that private key was saved into file
      ansible.builtin.stat:
        path: "{{ priv_key_file_name }}"
      register: result
      failed_when: (not result.stat.exists) or (result.stat.size == 0)

    - name: test re-"creating" the same key (check_mode)
      ec2_key:
        name: "{{ ec2_key_name_rsa }}"
        state: present
        file_name: "{{ priv_key_file_name }}"
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue
          spaced key: Spaced value
      register: result
      check_mode: true

    - name: assert re-creating the same key
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test re-"creating" the same key
      ec2_key:
        name: "{{ ec2_key_name_rsa }}"
        state: present
        file_name: "{{ priv_key_file_name }}"
        tags:
          snake_case: a_snake_case_value
          CamelCase: CamelCaseValue
          spaced key: Spaced value
      register: result

    - name: assert re-creating the same key
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test updating tags without purge (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: false

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test updating tags without purge
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: false

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - result.key.id == key_id_1
          - '"tags" in result.key'
          - result.key.name == ec2_key_name
          - '"snake_case" in result.key.tags'
          - result.key.tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in result.key.tags'
          - result.key.tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in result.key.tags'
          - result.key.tags['spaced key'] == 'Spaced value'
          - '"newKey" in result.key.tags'
          - result.key.tags['newKey'] == 'Another value'

    - name: Gather info about the updated tags
      ec2_key_info:
        names: "{{ ec2_key_name }}"
      register: key_info

    - name: assert the gathered key info
      ansible.builtin.assert:
        that:
          - key_info.keypairs[0].key_name == ec2_key_name
          - key_info.keypairs[0].key_pair_id == key_id_1
          - '"snake_case" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['spaced key'] == 'Spaced value'
          - '"newKey" in key_info.keypairs[0].tags'
          - key_info.keypairs[0].tags['newKey'] == 'Another value'

    - name: test updating tags without purge - idempotency (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: false

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test updating tags without purge - idempotency
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: false

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is not changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == ec2_key_name
          - result.key.id == key_id_1
          - '"snake_case" in result.key.tags'
          - result.key.tags['snake_case'] == 'a_snake_case_value'
          - '"CamelCase" in result.key.tags'
          - result.key.tags['CamelCase'] == 'CamelCaseValue'
          - '"spaced key" in result.key.tags'
          - result.key.tags['spaced key'] == 'Spaced value'
          - '"newKey" in result.key.tags'
          - result.key.tags['newKey'] == 'Another value'

    - name: test updating tags with purge (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: true

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test updating tags with purge
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: true

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - result.key.id == key_id_1
          - '"tags" in result.key'
          - result.key.name == ec2_key_name
          - '"snake_case" not in result.key.tags'
          - '"CamelCase" not in result.key.tags'
          - '"spaced key" not in result.key.tags'
          - '"newKey" in result.key.tags'
          - result.key.tags['newKey'] == 'Another value'

    - name: test updating tags with purge - idempotency (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: true

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test updating tags with purge - idempotency
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: present
        tags:
          newKey: Another value
        purge_tags: true

    - name: assert updated tags
      ansible.builtin.assert:
        that:
          - result is not changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == ec2_key_name
          - result.key.id == key_id_1
          - '"snake_case" not in result.key.tags'
          - '"CamelCase" not in result.key.tags'
          - '"spaced key" not in result.key.tags'
          - '"newKey" in result.key.tags'
          - result.key.tags['newKey'] == 'Another value'

    - name: test removing an existent key (check mode)
      register: result
      check_mode: true
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: absent

    - name: assert removing an existent key
      ansible.builtin.assert:
        that:
          - result is changed

    - name: assert using check_mode did not removed key pair
      ec2_key_info:
        names:
          - "{{ ec2_key_name }}"
      register: keys
      failed_when: keys.keypairs | length == 0

    - name: test removing an existent key
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: absent

    - name: assert removing an existent key
      ansible.builtin.assert:
        that:
          - result is changed
          - '"key" in result'
          - result.key == None

    - name: assert that key pair was removed
      ec2_key_info:
        names:
          - "{{ ec2_key_name }}"
      register: keys
      failed_when: keys.keypairs | length > 0

    - name: test state=present with key_material
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_material: "{{ key_material }}"
        state: present

    - name: assert state=present with key_material
      ansible.builtin.assert:
        that:
          - result.changed == True
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == "{{ec2_key_name}}"
          - result.key.fingerprint == "{{fingerprint}}"

    - name: Gather key info with fingerprint
      ec2_key_info:
        filters:
          fingerprint: "{{ fingerprint }}"
      register: key_info

    - name: assert gathered key info
      ansible.builtin.assert:
        that:
          - '"key_fingerprint" in key_info.keypairs[0]'
          - '"private_key" not in key_info.keypairs[0]'
          - '"key_pair_id" in key_info.keypairs[0]'
          - '"tags" in key_info.keypairs[0]'
          - key_info.keypairs[0].key_name == "{{ec2_key_name}}"
          - key_info.keypairs[0].key_fingerprint == "{{fingerprint}}"

    - name: test state=present with key_material (idempotency)
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_material: "{{ key_material }}"
        state: present

    - name: assert state=present with key_material
      ansible.builtin.assert:
        that:
          - result is not changed
          - '"key" in result'
          - '"name" in result.key'
          - '"fingerprint" in result.key'
          - '"private_key" not in result.key'
          - '"id" in result.key'
          - '"tags" in result.key'
          - result.key.name == "{{ec2_key_name}}"
          - result.key.fingerprint == "{{fingerprint}}"
          - result.msg == "key pair already exists"

    - name: test force=no with another_key_material (expect changed=false)
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_material: "{{ another_key_material }}"
        force: false

    - name: assert force=no with another_key_material (expect changed=false)
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.key.fingerprint == "{{ fingerprint }}"

    - name: test updating a key pair using another_key_material (expect changed=True)
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_material: "{{ another_key_material }}"

    - name: assert updating a key pair using another_key_material (expect changed=True)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.key.fingerprint != "{{ fingerprint }}"

    - name: test state=absent (expect changed=true)
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        state: absent

    - name: assert state=absent with key_material (expect changed=true)
      ansible.builtin.assert:
        that:
          - result.changed
          - '"key" in result'
          - result.key == None

    - name: test create ED25519 key pair type
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_type: ed25519

    - name: assert that task succeed
      ansible.builtin.assert:
        that:
          - result.changed
          - result.key.type == "ed25519"

    - name: Update key pair type from ED25519 to RSA
      register: result
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_type: rsa

    - name: assert that task succeed
      assert:
        that:
          - result.changed
          - result.key.type == "rsa"

  always:
    - name: Always delete the key we might create
      with_items:
        - "{{ ec2_key_name }}"
        - "{{ ec2_key_name_rsa }}"
      amazon.aws.ec2_key:
        name: "{{ item }}"
        state: absent

    - name: Delete the temporary directory
      ignore_errors: true
      ansible.builtin.file:
        path: "{{ _tmpdir.path }}"
        state: absent
